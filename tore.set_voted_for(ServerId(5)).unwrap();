[1mdiff --git a/src/lib.rs b/src/lib.rs[m
[1mindex 2735cee..6c473ef 100644[m
[1m--- a/src/lib.rs[m
[1m+++ b/src/lib.rs[m
[36m@@ -265,7 +265,7 @@[m [mimpl fmt::Display for LogIndex {[m
 [m
 /// The ID of a Raft server. Must be unique among the participants in a[m
 /// consensus group.[m
[31m-#[derive(Copy, Clone, Hash, PartialEq, Eq)][m
[32m+[m[32m#[derive(Copy, Clone, Hash, PartialEq, Eq, RustcEncodable, RustcDecodable)][m
 pub struct ServerId(u64);[m
 impl ServerId {[m
     fn as_u64(self) -> u64 {[m
[1mdiff --git a/src/persistent_log/doc.rs b/src/persistent_log/doc.rs[m
[1mindex a2456da..0728bda 100644[m
[1m--- a/src/persistent_log/doc.rs[m
[1m+++ b/src/persistent_log/doc.rs[m
[36m@@ -54,6 +54,20 @@[m [mimpl DocLog {[m
         }[m
     }[m
 [m
[32m+[m[32m    pub fn sync_voted_for(&mut self) -> result::Result<ServerId, Error> {[m
[32m+[m[32m        let mut voted_for_handler = OpenOptions::new()[m
[32m+[m[32m            .read(true)[m
[32m+[m[32m            .write(true)[m
[32m+[m[32m            .create(true)[m
[32m+[m[32m            .open("voted_for")[m
[32m+[m[32m            .unwrap();[m
[32m+[m
[32m+[m[32m        let voted_for_decode: ServerId = (decode_from(&mut voted_for_handler, SizeLimit::Infinite)).unwrap();[m
[32m+[m[32m        self.voted_for = Some(voted_for_decode);[m
[32m+[m
[32m+[m[32m        Ok(voted_for_decode)[m
[32m+[m[32m    }[m
[32m+[m
     pub fn sync_term(&mut self) -> result::Result<Term, Error> {[m
         let mut term_handler = OpenOptions::new()[m
             .read(true)[m
[36m@@ -100,7 +114,10 @@[m [mimpl Log for DocLog {[m
 [m
     fn inc_current_term(&mut self) -> result::Result<Term, Error> {[m
         self.voted_for = None;[m
[31m-        self.current_term = self.current_term + 1;[m
[32m+[m[32m        let new_term = self.sync_term().unwrap() + 1;[m
[32m+[m[32m        self.set_current_term(new_term);[m
[32m+[m[32m        println!("{}", new_term);[m
[32m+[m[32m        //self.set_current_term(self.current_term().unwrap() + 1).unwrap();[m
         self.current_term()[m
     }[m
 [m
[36m@@ -109,6 +126,15 @@[m [mimpl Log for DocLog {[m
     }[m
 [m
     fn set_voted_for(&mut self, address: ServerId) -> result::Result<(), Error> {[m
[32m+[m[32m        let mut voted_for_handler = OpenOptions::new()[m
[32m+[m[32m            .read(true)[m
[32m+[m[32m            .write(true)[m
[32m+[m[32m            .create(true)[m
[32m+[m[32m            .open("voted_for")[m
[32m+[m[32m            .unwrap();[m
[32m+[m
[32m+[m[32m        encode_into(&address, &mut voted_for_handler, SizeLimit::Infinite);[m
[32m+[m
         Ok(self.voted_for = Some(address))[m
     }[m
 [m
[36m@@ -156,7 +182,7 @@[m [mmod test {[m
     use std::io::SeekFrom;[m
 [m
     #[test][m
[31m-    fn test_sync() {[m
[32m+[m[32m    fn test_sync_term() {[m
         let mut f = OpenOptions::new().read(true).write(true).create(true).open("term").unwrap();[m
 [m
         let term = Term(10);[m
[36m@@ -167,10 +193,27 @@[m [mmod test {[m
 [m
         let decoded_term: Term = decode_from(&mut f, SizeLimit::Infinite).unwrap();[m
 [m
[32m+[m[32m        println!("{}",decoded_term);[m
[32m+[m
         assert_eq!(decoded_term, term);[m
     }[m
 [m
     #[test][m
[32m+[m[32m    fn test_sync_voted_for() {[m
[32m+[m[32m        let mut f = OpenOptions::new().read(true).write(true).create(true).open("voted_for").unwrap();[m
[32m+[m
[32m+[m[32m        let voted_for = ServerId(5);[m
[32m+[m
[32m+[m[32m        encode_into(&voted_for, &mut f, SizeLimit::Infinite).unwrap();[m
[32m+[m
[32m+[m[32m        f.seek(SeekFrom::Start(0));[m
[32m+[m
[32m+[m[32m        let decoded_voted_for: ServerId = decode_from(&mut f, SizeLimit::Infinite).unwrap();[m
[32m+[m[41m        [m
[32m+[m[32m        assert_eq!(decoded_voted_for, voted_for);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    #[test][m
     fn test_current_term() {[m
         let mut store = DocLog::new();[m
         assert_eq!(Term(0), store.current_term().unwrap());[m
[36m@@ -182,15 +225,27 @@[m [mmod test {[m
         assert_eq!(Term(42), store.current_term().unwrap());[m
         store.inc_current_term().unwrap();[m
         assert_eq!(Term(43), store.current_term().unwrap());[m
[32m+[m[32m        store.current_term = Term(44);[m
[32m+[m[32m        let sync = store.sync_term().unwrap();[m
[32m+[m[32m        assert_eq!(sync,Term(43));[m
     }[m
 [m
     #[test][m
     fn test_voted_for() {[m
         let mut store = DocLog::new();[m
[32m+[m[41m        [m
         assert_eq!(None, store.voted_for().unwrap());[m
         let id = ServerId::from(0);[m
         store.set_voted_for(id).unwrap();[m
         assert_eq!(Some(id), store.voted_for().unwrap());[m
[32m+[m[32m        //sync[m
[32m+[m[32m        store.set_voted_for(ServerId(5)).unwrap();[m
[32m+[m[32m        let sync = store.sync_voted_for().unwrap();[m
[32m+[m[32m        assert_eq!(ServerId(5), sync);[m
[32m+[m[32m        store.voted_for = Some(ServerId(6));[m
[32m+[m[32m        let sync = store.sync_voted_for().unwrap();[m
[32m+[m[32m        assert_eq!(ServerId(5), sync);[m
[32m+[m
     }[m
 [m
     #[test][m
